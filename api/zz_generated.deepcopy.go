//go:build !ignore_autogenerated

// Code generated by controller-gen. DO NOT EDIT.

package api

import ()

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ComponentDefinition) DeepCopyInto(out *ComponentDefinition) {
	*out = *in
	if in.Routes != nil {
		in, out := &in.Routes, &out.Routes
		*out = make([]RouteSpec, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.EnvVarSchema != nil {
		in, out := &in.EnvVarSchema, &out.EnvVarSchema
		*out = make(EnvVarSchema, len(*in))
		for key, val := range *in {
			var outVal *EnvVarDefinition
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(EnvVarDefinition)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Dependencies != nil {
		in, out := &in.Dependencies, &out.Dependencies
		*out = make(map[string]*Dependency, len(*in))
		for key, val := range *in {
			var outVal *Dependency
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(Dependency)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ComponentDefinition.
func (in *ComponentDefinition) DeepCopy() *ComponentDefinition {
	if in == nil {
		return nil
	}
	out := new(ComponentDefinition)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Data) DeepCopyInto(out *Data) {
	*out = *in
	if in.Vars != nil {
		in, out := &in.Vars, &out.Vars
		*out = make(map[string]*Val, len(*in))
		for key, val := range *in {
			var outVal *Val
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(Val)
				(*in).DeepCopyInto(*out)
			}
			(*out)[key] = outVal
		}
	}
	if in.Secrets != nil {
		in, out := &in.Secrets, &out.Secrets
		*out = make(map[string]*Val, len(*in))
		for key, val := range *in {
			var outVal *Val
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(Val)
				(*in).DeepCopyInto(*out)
			}
			(*out)[key] = outVal
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Data.
func (in *Data) DeepCopy() *Data {
	if in == nil {
		return nil
	}
	out := new(Data)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DataDetails) DeepCopyInto(out *DataDetails) {
	*out = *in
	out.Details = in.Details
	if in.Vars != nil {
		in, out := &in.Vars, &out.Vars
		*out = make(map[string]Details, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.Secrets != nil {
		in, out := &in.Secrets, &out.Secrets
		*out = make(map[string]Details, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DataDetails.
func (in *DataDetails) DeepCopy() *DataDetails {
	if in == nil {
		return nil
	}
	out := new(DataDetails)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DataKey) DeepCopyInto(out *DataKey) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DataKey.
func (in *DataKey) DeepCopy() *DataKey {
	if in == nil {
		return nil
	}
	out := new(DataKey)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Dependency) DeepCopyInto(out *Dependency) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Dependency.
func (in *Dependency) DeepCopy() *Dependency {
	if in == nil {
		return nil
	}
	out := new(Dependency)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Details) DeepCopyInto(out *Details) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Details.
func (in *Details) DeepCopy() *Details {
	if in == nil {
		return nil
	}
	out := new(Details)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *EnvSchema) DeepCopyInto(out *EnvSchema) {
	*out = *in
	if in.Vars != nil {
		in, out := &in.Vars, &out.Vars
		*out = make(EnvVarSchema, len(*in))
		for key, val := range *in {
			var outVal *EnvVarDefinition
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(EnvVarDefinition)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Secrets != nil {
		in, out := &in.Secrets, &out.Secrets
		*out = make(EnvVarSchema, len(*in))
		for key, val := range *in {
			var outVal *EnvVarDefinition
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(EnvVarDefinition)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new EnvSchema.
func (in *EnvSchema) DeepCopy() *EnvSchema {
	if in == nil {
		return nil
	}
	out := new(EnvSchema)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *EnvVarDefinition) DeepCopyInto(out *EnvVarDefinition) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new EnvVarDefinition.
func (in *EnvVarDefinition) DeepCopy() *EnvVarDefinition {
	if in == nil {
		return nil
	}
	out := new(EnvVarDefinition)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in EnvVarSchema) DeepCopyInto(out *EnvVarSchema) {
	{
		in := &in
		*out = make(EnvVarSchema, len(*in))
		for key, val := range *in {
			var outVal *EnvVarDefinition
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(EnvVarDefinition)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new EnvVarSchema.
func (in EnvVarSchema) DeepCopy() EnvVarSchema {
	if in == nil {
		return nil
	}
	out := new(EnvVarSchema)
	in.DeepCopyInto(out)
	return *out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Problem) DeepCopyInto(out *Problem) {
	*out = *in
	if in.Causes != nil {
		in, out := &in.Causes, &out.Causes
		*out = make([]ProblemSource, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Problem.
func (in *Problem) DeepCopy() *Problem {
	if in == nil {
		return nil
	}
	out := new(Problem)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ProblemSource) DeepCopyInto(out *ProblemSource) {
	*out = *in
	if in.Value != nil {
		in, out := &in.Value, &out.Value
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ProblemSource.
func (in *ProblemSource) DeepCopy() *ProblemSource {
	if in == nil {
		return nil
	}
	out := new(ProblemSource)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in Problems) DeepCopyInto(out *Problems) {
	{
		in := &in
		*out = make(Problems, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Problems.
func (in Problems) DeepCopy() Problems {
	if in == nil {
		return nil
	}
	out := new(Problems)
	in.DeepCopyInto(out)
	return *out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RouteSpec) DeepCopyInto(out *RouteSpec) {
	*out = *in
	if in.EnvVarSchema != nil {
		in, out := &in.EnvVarSchema, &out.EnvVarSchema
		*out = make(EnvVarSchema, len(*in))
		for key, val := range *in {
			var outVal *EnvVarDefinition
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(EnvVarDefinition)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RouteSpec.
func (in *RouteSpec) DeepCopy() *RouteSpec {
	if in == nil {
		return nil
	}
	out := new(RouteSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Val) DeepCopyInto(out *Val) {
	*out = *in
	if in.arrayNumVal != nil {
		in, out := &in.arrayNumVal, &out.arrayNumVal
		*out = make([]float64, len(*in))
		copy(*out, *in)
	}
	if in.arrayStrVal != nil {
		in, out := &in.arrayStrVal, &out.arrayStrVal
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Val.
func (in *Val) DeepCopy() *Val {
	if in == nil {
		return nil
	}
	out := new(Val)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ValJSON) DeepCopyInto(out *ValJSON) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ValJSON.
func (in *ValJSON) DeepCopy() *ValJSON {
	if in == nil {
		return nil
	}
	out := new(ValJSON)
	in.DeepCopyInto(out)
	return out
}
